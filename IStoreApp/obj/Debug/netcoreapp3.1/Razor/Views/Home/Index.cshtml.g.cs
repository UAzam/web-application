#pragma checksum "E:\Users\00007784\Downloads\IStoreApp\IStoreApp\IStoreApp\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "18cac0d673836be67025a70cfd14fe7dcf653dc3"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "E:\Users\00007784\Downloads\IStoreApp\IStoreApp\IStoreApp\Views\_ViewImports.cshtml"
using IStoreApp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Users\00007784\Downloads\IStoreApp\IStoreApp\IStoreApp\Views\_ViewImports.cshtml"
using IStoreApp.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"18cac0d673836be67025a70cfd14fe7dcf653dc3", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"85436b83b2d7aa2f3dc878d7ec13fe453a9d609c", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "E:\Users\00007784\Downloads\IStoreApp\IStoreApp\IStoreApp\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
    <div class=""row"">
        <div class=""col-md-9"">
            <div id=""divProducts"">

            </div>
            <div id=""divLoader"" style=""display:block;width:50px;margin:0 auto; padding:5px;"">
                <div class=""loader""></div>

            </div>

        </div>
        <div class=""col-md-3"">
            <div class=""cartDiv"">
                <h3>Cart</h3>
                <div id=""divCartItems""></div>
            </div>
        </div>
    </div>
    <script id="" cartItem-template"" type=""text/x-handlebars-template"">
        {{#CartItems}}
        <div>
            <hr />
            <b>{{name}}</b>
            <br />
            <hr />
            <b>Quantity: </b> {{quantity}}
            <br />
            <hr />
            <b>Price:</b>{{price}}
            <br />
            <button type=""button"" class=""btn btn-danger"" onclick=""javascript: removeFromCart({id})"">Remove</button>
            <hr/>
        </div>
        {{/CartItems}}
        <div><b>Total");
            WriteLiteral(@": </b>{{total}}</div>
    </script>

<script id=""product-template"" type=""text/x-handlebars-template"">
    <div class=""row productItem"">
        <div class=""col-md-3"">
            <img src=""images/Products/{{image}}"" style=""width:200px;height:300px;margin-top:30px;""
        </div>
        <div class=""col-md-9"">
            <h3><a href="""">{{name}}</a></h3>
            <hr />
            <b>By: </b> {{supplier}}
            <br />
            <b>Price: </b> ${{price}}
            <br />
            <b>Rating: </b> <span class=""rating-{{rating}}""></span>
            <br />
            <hr />
            {{description}}

            <hr />
            <button type=""button"" class=""btn btn-danger"" onclick=""javascript: addToCart({id}, {name}, {price})"">Add to Cart</button>
            <span style=""color:green;font-size:20px;"">In Stock</span>
            <hr />
        </div>
    </div>
</script>

<script>
    let productSource = document.querySelector('#product-template').innerHTML;
    ");
            WriteLiteral(@"let cartItemSource = document.querySelector('#cartItem-template').innerHTML;
    let pageNumber = 0;
    window.addEventListener('DOMContentLoaded', load);

    function load() {

        let options = {
            root: null,
            rootMargin: '0px',
            threshold: 1.0
        };

        let callback = (entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    pageNumber++;
                    loadProducts();
                }
            });
        };

        let observer = new IntersectionObserver(callback, options);
        observer.observe(document.querySelector('#divLoader'));

        refreshCartItems();
    }

    async function loadProducts() {
        let $divProducts = $('#divProducts');
        let template = Handlebars.compile(productSource);
        let observable = await getFetchObservable('api/Products/' + pageNumber);
        observable.subscribe(data => {
            let arr");
            WriteLiteral(@"aysource = rxjs.from(data);
            arraysource.subscribe(product => {
                $divProducts.append($(template(product)));
            });
        });
    }

    async function getFetchObservable(url) {
        let response = await fetch(url);
        let json = await response.json();
        return rxjs.Observable.create(fetchObserver => {
            fetchObserver.next(json);
            fetchObserver.complete();

        }); 
    }

    async function refreshCartItems() {
        let $divCartItems = $('#divCartItems');
        let template = Handlebars.compile(cartItemSource);
        let observable = await getFetchObservable('api/Cart');
        observable.subscribe(data => {
            let total = 0;
            data.forEach(cartItem => {
                total += parseFloat(cartItem.price);
            });

            $divCartItems.html($(template({ CartItems: data, total: '$' + total })));
        });
    }

    async function addToCart(productId, name, price)");
            WriteLiteral(@" {
        let cartItem = {
            Id: productId,
            Name: name,
            Price: price,
            Quantity: 1
        };

        let data = {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(cartItem)
        };

        let response = await fetch('api/Cart', data);
        refreshCartItems();
    }

    async function removeFromCart(productId) {
        let data = {
            method: 'DELETE'
        };
        let response = await fetch('api/cart/' + productId, data);
        refreshCartItems();
    }
</script>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
